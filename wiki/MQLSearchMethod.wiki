#summary MQL Search Method

=MQL search=


Method to search entities using the [http://www.freebase.com/view/en/documentation Metaweb Query Language] (MQL). This is the more powerful way to search for entities, as it allows developers to express constraints on properties of entities, *including values contained in views*.

*Getting Started*: We recommend that you first take a look at the [http://download.freebase.com/MQLReferenceGuide.pdf MQL Reference Guide] and [http://download.freebase.com/MQLcheatsheet-081208.pdf MQL Cheat Sheet] to get an idea of how MQL works.

==URL==

{{{
http://api.townme.com/v1/search
}}}

==Parameters==

  * GlobalParameters
  * *q*: 
    * Required. 
    * Description: MQL query specifying search constraints. 
    * Format: MQL syntax (examples below)


==General Idea==
The idea behind the MQL search interface is that you provide a query in similar format as the response, where you specify properties you want to constrain by setting their values and properties that you want to be returned by specifying their values as 'null'. 

For example, to express that you want the names and prices of all menu items that are of type 'dessert', you could have the following:
{{{
{
  "menu_item": [{
    "name": null,
    "price": null,
    "type": "dessert"
  }]
}
}}}

==GeoAPI Queries==
Geo search queries follow the pattern below:
{{{
{
  "lat": <lat>,
  "lon": <lon>,
  "radius": <radius>,
  "limit": <limit>,
  "entity": [{
    <entity_property_1>,
    <entity_property_2>,
    ...,
    "view.<view_name>": {
      <view_property_1>,
      <view_property_2>,
      ...
    }
  }]
}
}}}

*Field explanation*
  * {{{<lat>}}}: 
    * Required. 
    * Description: Decimal latitude for search. 
    * Format: Positive or negative floating point number (ex. 37.75647)
  * {{{<lon>}}}: 
    * Required. 
    * Description: Decimal longitude for search. 
    * Format: positive or negative floating point number (ex. -122.421218)
  * {{{<radius>}}}: 
    * Required. 
    * Description: Search radius. 
    * Format: Floating point number followed by unit abbreviation (ex. 0.1km). Supported units listed below. The default radius is 500m and the maximum radius is 1km (2km if you constrain type to POI).
  * {{{<limit>}}}: 
    * Optional. 
    * Description: Max number of results to return.
    * Format: Positive integer. Default is 10 and maximum is 100.
  * {{{<entity_property>}}}
    * Optional
    * Description: Any number of entity properties. Specifying a value for an property constrains the search. Specifying a {{{null}}} value causes the property to be returned.
    * Format: The full list of property is listed at the root url of an entity (ex. [http://api.townme.com/v1/e/ritual-coffee-roasters-san-francisco-ca-94110?apikey=demo&pretty=1 http://api.townme.com/v1/e/ritual-coffee-roasters-san-francisco-ca-94110]). 
  * {{{<view_name>}}}
    * Optional
    * Description: Specifying a view allows you to filter based on its values and/or get back those values for returned entities. 
    * Format: Name of a view. Currently supported views are 'listing' and user-defined views.
  * {{{<view_property>}}}
    * Optional
    * Description: Any number of view properties. Specifying a value for an property constrains the search. Specifying a {{{null}}} value causes the property to be returned.
    * Format: Valid property names for the specified view. For example, for the 'listing' view, the possible properties can be seen on the view results for an entity (ex. [http://api.townme.com/v1/e/ritual-coffee-roasters-san-francisco-ca-94110/view/listing?apikey=demo&pretty=1 http://api.townme.com/v1/e/ritual-coffee-roasters-san-francisco-ca-94110/view/listing])

==Constraining Properties==
_Properties can be constrained using several standard MQL operators. They way you constrain a property (i.e. filter by a specific value) is by specifying that property and the value by which you want it filtered. The list of supported operators are below._
  * *equality* - [http://mql.freebaseapps.com/ch03.html#operators MQL doc]
    * ex: {{{"name": "Tartine"}}} name is required to be equal to "Tartine".
  * *inequality* (but not operator) - [http://mql.freebaseapps.com/ch03.html#butnotoperator MQL doc]
    * {{{"name!=":"Tartine"}}} name can be anything but "Tartine" (including null).
  * *prefix* - [http://mql.freebaseapps.com/ch03.html#matchsyntax MQL doc]
    * {{{"name^=": "The"}}} name is required to start with "The".
    * *Note that our syntax here is slightly different than MQL - instead of having a regex operator, we have an explicit prefix operator (^).*
*IMPORTANT NOTE*: You can constrain results *only* based on indexed properties. At this time, the indexed properties are:
  * view.listing/name
  * view.listing/verticals
  * view.listing/features
  * view.listing/web-wide-rating

==Requesting Properties==
_Properties can be requested (from entities or views) by specifying the property name and 'null' as its value. You can request all properties of an entity or view by passing in a wildcard._
  * *property to request* - [http://mql.freebaseapps.com/ch03.html#mqlids MQL doc]
    * {{{"name": null}}} Fill in the name property in the response.
  * *wildcards* [http://mql.freebaseapps.com/ch03.html#wildcards MQL doc]
    * {{{"*": null}}} Return all properties.
 
==Examples==

Below are several examples of MQL queries. Note that the queries are of the following format: {{{http://api.townme.com/v1/search?&apikey=demo&q=<query>}}}, however in the examples below, we'll only be showing the 'q' parameter, as that parameterizes the entire query.

*query* 
{{{
{
  "lat": 37.75629
  "lon": -122.4213
  "radius": "0.2km"
  "entity": [{
    "guid": null
    "type": "business"
    "view.listing": {
      "a:verticals": "restaurants"
      "b:verticals": "food-and-drink:coffee-houses"
      "address": []
      "name": null
    }
  }]
}
}}}

*response*
{{{

}}}

==Usage Notes==

  * results are sorted by distance relative to the specified lat/lon
  * a maximum of 100 results will be returned
  * the maximum radius is 1km - anything above that will be treated as 1km

==Supported distance units==

|| unit || abbreviation ||
|| foot || ft ||
|| kilometer || km ||
|| meter || m ||
|| mile || mi ||
|| yard || yd ||

__Below are some other distance units we support for fun. No guarantees about them working long-term, but we figured we'd try to make pirates, Brits, Indians, astronomers, statisticians and MIT students feel at home :).__

|| unit || abbreviation ||
|| British foot || british_ft ||
|| Indian yard || indian_yd ||
|| Nautical Mile || nm ||
|| US survey foot || survey_ft ||
|| Attoparsecs || attoparsec ||
|| Smoot || smoot ||